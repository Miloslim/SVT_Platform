// ============================================================
// üìå Fichier : useStudentsData.ts
// üéØ Objectif : Gestion centralis√©e des donn√©es des √©l√®ves
// ============================================================

import { useState, useEffect } from 'react';
import { supabase } from "../../../backend/config/supabase";

// Typage des donn√©es des √©l√®ves
interface Student {
  id: string;
  student_code: string;
  first_name: string;
  last_name: string;
  student_class: string;
  birth_date: string;
  gender?: string;
}

// ============================================================
// Hook personnalis√© : useStudentsData
// Description :
// - R√©cup√©rer et g√©rer les donn√©es des √©l√®ves.
// - Appliquer des filtres dynamiques par recherche ou classe.
// ============================================================
export const useStudentsData = () => {
  // === √âtats locaux ===
  const [students, setStudents] = useState<Student[]>([]); // Liste des √©l√®ves r√©cup√©r√©s
  const [filteredStudents, setFilteredStudents] = useState<Student[]>([]); // Liste filtr√©e
  const [loading, setLoading] = useState<boolean>(false); // Indicateur de chargement
  const [searchQuery, setSearchQuery] = useState<string>(''); // Recherche par mot-cl√©
  const [filterClass, setFilterClass] = useState<string>(''); // Filtrage par classe

  // ============================================================
  // Fonction : R√©cup√©rer les donn√©es des √©l√®ves depuis Supabase
  // ============================================================
  const fetchStudents = async () => {
    try {
      setLoading(true); // Activer l'indicateur de chargement

      const { data, error } = await supabase
        .from('students')
        .select('id, student_code, first_name, last_name, student_class, birth_date, gender');

      if (error) throw new Error(`Erreur lors de la r√©cup√©ration des √©l√®ves : ${error.message}`);

      setStudents(data || []);
      setFilteredStudents(data || []); // Initialiser la liste filtr√©e
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©l√®ves :', err.message);
    } finally {
      setLoading(false); // D√©sactiver l'indicateur de chargement
    }
  };

  // ============================================================
  // Effet : Charger les donn√©es au montage du composant
  // ============================================================
  useEffect(() => {
    fetchStudents(); // Charger la liste des √©l√®ves au d√©marrage
  }, []);

  // ============================================================
  // Effet : Appliquer les filtres dynamiquement
  // ============================================================
  useEffect(() => {
    const results = students
      .filter((student) =>
        student.first_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        student.last_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        student.student_code.toLowerCase().includes(searchQuery.toLowerCase())
      )
      .filter((student) => (filterClass ? student.student_class === filterClass : true));

    setFilteredStudents(results); // Mettre √† jour la liste filtr√©e
  }, [searchQuery, filterClass, students]);

  // ============================================================
  // Retour : √âtats et fonctions pour les composants consommateurs
  // ============================================================
  return {
    students: filteredStudents, // Liste des √©l√®ves filtr√©s
    loading, // Indicateur de chargement
    searchQuery, // Terme de recherche
    setSearchQuery, // Fonction pour modifier la recherche
    filterClass, // Classe filtr√©e
    setFilterClass, // Fonction pour modifier le filtre par classe
    fetchStudents, // Fonction pour r√©cup√©rer les √©l√®ves
  };
};
