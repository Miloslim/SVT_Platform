// Placeholder content
// ============================================================
// üìå Fichier : apiHelpers.ts
// üéØ Objectif :
//   - Fournir des fonctions utilitaires pour simplifier les appels API.
//   - Centraliser la gestion des requ√™tes HTTP avec gestion des erreurs.
// ============================================================

import { supabase } from '../config/supabase'; // Import de Supabase si n√©cessaire

// ============================================================
// üîπ Fonction : fetchData
//   - R√©cup√©rer des donn√©es d'une table dans Supabase.
//   - Param√®tres :
//       - tableName (string) : Le nom de la table √† interroger.
//       - selectFields (string) : Les colonnes √† r√©cup√©rer.
//   - Retourne : Un tableau de donn√©es ou une erreur.
// ============================================================
export const fetchData = async (tableName: string, selectFields: string = '*') => {
  try {
    const { data, error } = await supabase.from(tableName).select(selectFields);

    if (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration de ${tableName} :`, error.message);
      throw error;
    }

    return data; // Donn√©es r√©cup√©r√©es
  } catch (err) {
    throw new Error(`Erreur API : ${err.message}`);
  }
};

// ============================================================
// üîπ Fonction : insertData
//   - Ins√©rer des donn√©es dans une table Supabase.
//   - Param√®tres :
//       - tableName (string) : Le nom de la table o√π ins√©rer des donn√©es.
//       - payload (object) : Les donn√©es √† ins√©rer.
//   - Retourne : L'objet ins√©r√© ou une erreur.
// ============================================================
export const insertData = async (tableName: string, payload: object) => {
  try {
    const { data, error } = await supabase.from(tableName).insert(payload);

    if (error) {
      console.error(`‚ùå Erreur lors de l'insertion dans ${tableName} :`, error.message);
      throw error;
    }

    return data; // Donn√©es ins√©r√©es
  } catch (err) {
    throw new Error(`Erreur API : ${err.message}`);
  }
};

// ============================================================
// üîπ Fonction : updateData
//   - Mettre √† jour des donn√©es dans une table Supabase.
//   - Param√®tres :
//       - tableName (string) : Le nom de la table √† mettre √† jour.
//       - criteria (object) : Les crit√®res de s√©lection (ex : { id: 1 }).
//       - updates (object) : Les nouvelles valeurs √† appliquer.
//   - Retourne : Les donn√©es mises √† jour ou une erreur.
// ============================================================
export const updateData = async (tableName: string, criteria: object, updates: object) => {
  try {
    const { data, error } = await supabase.from(tableName).update(updates).match(criteria);

    if (error) {
      console.error(`‚ùå Erreur lors de la mise √† jour de ${tableName} :`, error.message);
      throw error;
    }

    return data; // Donn√©es mises √† jour
  } catch (err) {
    throw new Error(`Erreur API : ${err.message}`);
  }
};

// ============================================================
// üîπ Fonction : deleteData
//   - Supprimer des donn√©es dans une table Supabase.
//   - Param√®tres :
//       - tableName (string) : Le nom de la table √† supprimer.
//       - criteria (object) : Les crit√®res de suppression (ex : { id: 1 }).
//   - Retourne : Les donn√©es supprim√©es ou une erreur.
// ============================================================
export const deleteData = async (tableName: string, criteria: object) => {
  try {
    const { data, error } = await supabase.from(tableName).delete().match(criteria);

    if (error) {
      console.error(`‚ùå Erreur lors de la suppression dans ${tableName} :`, error.message);
      throw error;
    }

    return data; // Donn√©es supprim√©es
  } catch (err) {
    throw new Error(`Erreur API : ${err.message}`);
  }
};

// ============================================================
// ‚ÑπÔ∏è Notes :
//   - Ajoutez d'autres fonctions sp√©cifiques √† vos besoins API ici.
//   - Toutes les fonctions g√®rent les erreurs pour une maintenance simplifi√©e.
// ============================================================
