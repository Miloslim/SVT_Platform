// üìÅ src/backend/utils/notificationHelpers.ts

/**
 * Ce fichier fournit des fonctions utilitaires pour afficher des notifications toast.
 * Il assure que les messages d'erreur sont toujours des cha√Ænes de caract√®res lisibles,
 * m√™me si l'entr√©e est un objet Error ou un objet g√©n√©rique complexe.
 */

import { toast } from "sonner"; // Importer 'toast' depuis sonner

/**
 * Affiche une notification de succ√®s.
 * @param message Le message de succ√®s √† afficher.
 * @param title Le titre optionnel de la notification. Par d√©faut : "Succ√®s !".
 */
export function notifySuccess(message: string, title?: string): void {
  toast({
    title: title || "Succ√®s !",
    description: message,
    duration: 3000, // Dur√©e par d√©faut pour les succ√®s
  });
}

/**
 * Affiche une notification d'erreur.
 * Tente d'extraire un message textuel lisible (et un titre) √† partir de diverses formes d'erreurs.
 * @param error L'erreur √† afficher. Peut √™tre une cha√Æne, une instance d'Error,
 * ou un objet g√©n√©rique (potentiellement avec des propri√©t√©s comme 'message', 'title', 'description').
 * @param defaultTitle Le titre par d√©faut si aucun titre n'est d√©duit de l'objet d'erreur.
 */
export function notifyError(
  error: string | Error | { message?: string; title?: string; description?: string; duration?: number; } | any,
  defaultTitle?: string
): void {
  let finalTitle: string = defaultTitle || "Erreur !";
  let finalDescription: string;

  if (typeof error === 'string') {
    // Cas o√π l'entr√©e est une simple cha√Æne de caract√®res
    finalDescription = error;
  } else if (error instanceof Error) {
    // Cas o√π l'entr√©e est une instance standard d'Error
    finalDescription = error.message;
  } else if (typeof error === 'object' && error !== null) {
    // Cas o√π l'entr√©e est un objet g√©n√©rique
    if (error.title && typeof error.title === 'string') {
      // Si l'objet a une propri√©t√© 'title', l'utiliser comme titre principal
      finalTitle = error.title;
      // La description peut venir de 'description' ou 'message' de l'objet, ou √™tre g√©n√©rique
      finalDescription = (error.description && typeof error.description === 'string')
        ? error.description
        : (error.message && typeof error.message === 'string')
          ? error.message
          : "Une erreur est survenue.";
    } else if (error.message && typeof error.message === 'string') {
      // Si l'objet a une propri√©t√© 'message', l'utiliser comme description
      finalDescription = error.message;
    } else if (error.description && typeof error.description === 'string') {
      // Si l'objet a une propri√©t√© 'description'
      finalDescription = error.description;
    } else {
      // Si aucune propri√©t√© connue n'est trouv√©e, tenter de s√©rialiser l'objet complet
      try {
        finalDescription = JSON.stringify(error);
      } catch (e) {
        finalDescription = "Une erreur inattendue est survenue (objet non s√©rialisable).";
      }
    }
  } else {
    // Cas par d√©faut pour tout autre type d'entr√©e inattendu
    finalDescription = "Une erreur inattendue est survenue.";
  }

  // Affiche la notification toast via sonner
  toast({
    title: finalTitle,
    description: finalDescription,
    duration: 5000, // Dur√©e plus longue pour les erreurs
  });
}
