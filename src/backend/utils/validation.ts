// Placeholder content
// ============================================================
// üìå Fichier : validation.ts
// üéØ Objectif :
//   - Fournir des fonctions utilitaires pour valider les donn√©es.
//   - Utilis√© pour v√©rifier les entr√©es utilisateur et les r√©ponses API.
// ============================================================

// ============================================================
// üîπ Fonction : validateEmail
//   - V√©rifie si une adresse email est valide.
//   - Param√®tres :
//       - email (string) : Adresse email √† valider.
//   - Retourne : true (valide) ou false (non valide).
// ============================================================
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// ============================================================
// üîπ Fonction : validateRequiredFields
//   - V√©rifie si tous les champs obligatoires sont remplis.
//   - Param√®tres :
//       - fields (object) : Objet contenant les champs √† valider.
//   - Retourne :
//       - true si tous les champs sont remplis, sinon false.
// ============================================================
export const validateRequiredFields = (fields: { [key: string]: any }): boolean => {
  return Object.values(fields).every((value) => value !== null && value !== undefined && value !== '');
};

// ============================================================
// üîπ Fonction : validatePhoneNumber
//   - V√©rifie si un num√©ro de t√©l√©phone est valide.
//   - Param√®tres :
//       - phoneNumber (string) : Num√©ro de t√©l√©phone √† valider.
//   - Retourne : true (valide) ou false (non valide).
// ============================================================
export const validatePhoneNumber = (phoneNumber: string): boolean => {
  const phoneRegex = /^[+]?[0-9\s-]{10,15}$/;
  return phoneRegex.test(phoneNumber);
};

// ============================================================
// üîπ Fonction : validateDate
//   - V√©rifie si une date est valide.
//   - Param√®tres :
//       - date (string) : Cha√Æne de date au format ISO ou similaire.
//   - Retourne : true (valide) ou false (non valide).
// ============================================================
export const validateDate = (date: string): boolean => {
  const parsedDate = Date.parse(date);
  return !isNaN(parsedDate);
};

// ============================================================
// üîπ Fonction : validateMinLength
//   - V√©rifie si une cha√Æne atteint une longueur minimale.
//   - Param√®tres :
//       - value (string) : Cha√Æne √† valider.
//       - minLength (number) : Longueur minimale requise.
//   - Retourne : true (valide) ou false (non valide).
// ============================================================
export const validateMinLength = (value: string, minLength: number): boolean => {
  return value.length >= minLength;
};

// ============================================================
// ‚ÑπÔ∏è Notes :
//   - Ce fichier est con√ßu pour √™tre extensible avec d'autres fonctions
//     sp√©cifiques selon vos besoins.
//   - Importez ces fonctions o√π vous devez valider des donn√©es utilisateur ou API.
// ============================================================
