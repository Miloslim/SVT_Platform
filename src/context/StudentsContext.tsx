// ============================================================
// üìå Fichier : StudentsContext.tsx
// üéØ Objectif :
//   - G√©rer les √©l√®ves dans l'application.
//   - Fournir un contexte React pour centraliser les donn√©es et
//     fonctions li√©es aux √©l√®ves.
// ============================================================

import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../backend/config/supabase'; // Connexion √† Supabase

// Typage des donn√©es d'√©l√®ves
interface Student {
  id: string;
  student_code: string;
  first_name: string;
  last_name: string;
  birth_date: string;
  student_class: string;
}

// Typage du contexte
interface StudentsContextType {
  students: Student[]; // Liste des √©l√®ves
  loading: boolean; // Indicateur de chargement
  fetchStudents: () => Promise<void>; // Fonction pour r√©cup√©rer les √©l√®ves
  addStudent: (studentData: Omit<Student, 'id'>) => Promise<void>; // Fonction pour ajouter un √©l√®ve
  updateStudent: (id: string, updates: Partial<Student>) => Promise<void>; // Fonction pour modifier un √©l√®ve
  deleteStudent: (id: string) => Promise<void>; // Fonction pour supprimer un √©l√®ve
}

// Cr√©ation du contexte des √©l√®ves
const StudentsContext = createContext<StudentsContextType | undefined>(undefined);

// Hook personnalis√© pour acc√©der au contexte des √©l√®ves
export function useStudents(): StudentsContextType {
  const context = useContext(StudentsContext);
  if (context === undefined) {
    throw new Error('‚ùå useStudents doit √™tre utilis√© dans un StudentsProvider.');
  }
  return context;
}

// Composant Provider : Fournit le contexte √† toute l'application
export default function StudentsProvider({ children }: { children: React.ReactNode }) {
  // === √âtats locaux ===
  const [students, setStudents] = useState<Student[]>([]); // Liste des √©l√®ves
  const [loading, setLoading] = useState<boolean>(true); // Indicateur de chargement

  // ============================================================
  // Fonction : R√©cup√©rer les √©l√®ves via Supabase
  // ============================================================
  const fetchStudents = async () => {
    try {
      setLoading(true); // Activer le chargement

      const { data, error } = await supabase
        .from('students')
        .select('id, student_code, first_name, last_name, birth_date, student_class'); // Colonnes n√©cessaires

      if (error) throw new Error(`Erreur lors de la r√©cup√©ration des √©l√®ves : ${error.message}`);

      setStudents(data || []); // Mettre √† jour les √©tats locaux
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©l√®ves :', err.message);
    } finally {
      setLoading(false); // D√©sactiver le chargement
    }
  };

  // ============================================================
  // Fonction : Ajouter un √©l√®ve
  // ============================================================
  const addStudent = async (studentData: Omit<Student, 'id'>) => {
    try {
      const { error } = await supabase
        .from('students')
        .insert(studentData); // Ins√©rer les donn√©es de l'√©l√®ve

      if (error) throw new Error(`Erreur lors de l'ajout de l'√©l√®ve : ${error.message}`);

      alert('‚úÖ √âl√®ve ajout√© avec succ√®s.');
      fetchStudents(); // Rafra√Æchir la liste apr√®s l'ajout
    } catch (err) {
      console.error('‚ùå Erreur lors de l\'ajout de l\'√©l√®ve :', err.message);
      alert('Une erreur est survenue lors de l\'ajout.');
    }
  };

  // ============================================================
  // Fonction : Modifier un √©l√®ve
  // ============================================================
  const updateStudent = async (id: string, updates: Partial<Student>) => {
    try {
      const { error } = await supabase
        .from('students')
        .update(updates) // Mettre √† jour les colonnes sp√©cifiques
        .eq('id', id); // Identifier l'√©l√®ve via son ID

      if (error) throw new Error(`Erreur lors de la modification de l'√©l√®ve : ${error.message}`);

      alert('‚úÖ √âl√®ve mis √† jour avec succ√®s.');
      fetchStudents(); // Rafra√Æchir la liste apr√®s la modification
    } catch (err) {
      console.error('‚ùå Erreur lors de la modification de l\'√©l√®ve :', err.message);
      alert('Une erreur est survenue lors de la modification.');
    }
  };

  // ============================================================
  // Fonction : Supprimer un √©l√®ve
  // ============================================================
  const deleteStudent = async (id: string) => {
    try {
      const { error } = await supabase
        .from('students')
        .delete() // Supprimer l'√©l√®ve
        .eq('id', id); // Identifier l'√©l√®ve via son ID

      if (error) throw new Error(`Erreur lors de la suppression de l'√©l√®ve : ${error.message}`);

      alert('‚úÖ √âl√®ve supprim√© avec succ√®s.');
      fetchStudents(); // Rafra√Æchir la liste apr√®s la suppression
    } catch (err) {
      console.error('‚ùå Erreur lors de la suppression de l\'√©l√®ve :', err.message);
      alert('Une erreur est survenue lors de la suppression.');
    }
  };

  // ============================================================
  // Effet : Charger les donn√©es des √©l√®ves au montage
  // ============================================================
  useEffect(() => {
    fetchStudents();
  }, []);

  // ============================================================
  // Rendu du Provider
  // ============================================================
  return (
    <StudentsContext.Provider value={{ students, loading, fetchStudents, addStudent, updateStudent, deleteStudent }}>
      {children}
    </StudentsContext.Provider>
  );
}

