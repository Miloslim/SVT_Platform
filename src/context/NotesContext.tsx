// ============================================================
// üìå Fichier : NotesContext.tsx
// üéØ Objectif :
//   - G√©rer les notes des √©l√®ves via Supabase.
//   - Fournir un contexte React pour acc√©der aux donn√©es des notes
//     dans toute l'application.
// ============================================================

import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../backend/config/supabase'; // Connexion √† Supabase

// Typage des donn√©es des notes
interface StudentNote {
  student_code: string;
  cc1: number | null;
  cc2: number | null;
  cc3: number | null;
  c_act: number | null;
}

// Typage du contexte
interface NotesContextType {
  notes: StudentNote[]; // Liste des notes des √©l√®ves
  loading: boolean; // Indicateur de chargement
  fetchNotes: () => Promise<void>; // Fonction pour r√©cup√©rer les notes
  updateNote: (
    student_code: string,
    updates: Partial<StudentNote>
  ) => Promise<void>; // Fonction pour modifier une note
}

// Cr√©ation du contexte des notes
const NotesContext = createContext<NotesContextType | undefined>(undefined);

// Hook personnalis√© pour acc√©der au contexte des notes
export function useNotes(): NotesContextType {
  const context = useContext(NotesContext);
  if (context === undefined) {
    throw new Error('‚ùå useNotes doit √™tre utilis√© dans un NotesProvider.');
  }
  return context;
}

// Composant Provider : Fournit le contexte √† toute l'application
export default function NotesProvider({ children }: { children: React.ReactNode }) {
  // === √âtats locaux ===
  const [notes, setNotes] = useState<StudentNote[]>([]); // Liste des notes des √©l√®ves
  const [loading, setLoading] = useState<boolean>(true); // Indicateur de chargement

  // ============================================================
  // Fonction : R√©cup√©rer les donn√©es des notes via Supabase
  // ============================================================
  const fetchNotes = async () => {
    try {
      setLoading(true); // Activer l'indicateur de chargement

      const { data, error } = await supabase
        .from('student_scores')
        .select('student_code, cc1, cc2, cc3, c_act'); // Colonnes n√©cessaires

      if (error) throw new Error(`Erreur lors de la r√©cup√©ration des notes : ${error.message}`);

      setNotes(data || []); // Mettre √† jour les √©tats locaux
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des notes :', err.message);
    } finally {
      setLoading(false); // D√©sactiver l'indicateur de chargement
    }
  };

  // ============================================================
  // Fonction : Modifier une note
  // ============================================================
  const updateNote = async (student_code: string, updates: Partial<StudentNote>) => {
    try {
      const { error } = await supabase
        .from('student_scores')
        .update(updates) // Mettre √† jour les colonnes sp√©cifiques
        .eq('student_code', student_code); // Identifier l'√©l√®ve via son code unique

      if (error) throw new Error(`Erreur lors de la modification des notes : ${error.message}`);

      // Rafra√Æchir les donn√©es apr√®s la mise √† jour
      await fetchNotes();
      alert('‚úÖ Notes mises √† jour avec succ√®s.');
    } catch (err) {
      console.error('‚ùå Erreur lors de la mise √† jour des notes :', err.message);
      alert('Une erreur est survenue lors de la modification des notes.');
    }
  };

  // ============================================================
  // Effet : Charger les donn√©es des notes au montage
  // ============================================================
  useEffect(() => {
    fetchNotes();
  }, []);

  // ============================================================
  // Rendu du Provider
  // ============================================================
  return (
    <NotesContext.Provider value={{ notes, loading, fetchNotes, updateNote }}>
      {children}
    </NotesContext.Provider>
  );
}
