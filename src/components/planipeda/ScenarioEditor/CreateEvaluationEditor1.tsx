// ============================================================
// Titre : CreateEvaluationEditor1
// Chemin : src/components/planipeda/ScenarioEditor/CreateEvaluationEditor.tsx
// Fonctionnalit√©s :
//    - Formulaire complet pour la cr√©ation/modification d'une √©valuation (contr√¥l√© par le parent).
//    - Int√©gration de la s√©lection hi√©rarchique (niveau > option > unit√© > chapitre > objectifs).
//    - Int√©gration de la s√©lection via listes d√©roulantes de comp√©tences, capacit√©s/habilet√©s et connaissances.
//      Permet la s√©lection d'une comp√©tence sp√©cifique et de MULTIPLES comp√©tences g√©n√©rales.
//      Permet la s√©lection de MULTIPLES connaissances et l'ajout d'une nouvelle connaissance textuelle.
//    - Utilise le composant MultiFileUpload pour g√©rer l'upload de MULTIPLES fichiers ressources.
//    - Envoie toutes les mises √† jour des champs au parent via `onUpdate`.
//    - D√©clenche la fonction de sauvegarde du parent via `onSaveTrigger` avec validation.
//    - Affiche les messages d'erreur/succ√®s et l'√©tat de sauvegarde re√ßus du parent.
// ============================================================

import React, { useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import HierarchicalSelector from "./HierarchicalSelector";
import MultiFileUpload from "./MultiFileUpload";
import CompetenceSelector from "./CompetenceSelector";
import ModaliteSelector from "./ModaliteSelector"; // NOUVEAU : Importation du composant ModaliteSelector

// ---
// Interface : EvaluationData
// Cette interface d√©finit la structure des donn√©es d'une √©valuation telle qu'elle est g√©r√©e dans le formulaire.
// Elle inclut les champs directs de la table 'evaluations' et les IDs des √©l√©ments s√©lectionn√©s
// des tables de liaison (objectifs, comp√©tences, capacit√©s/habilet√©s, connaissances).
// ---
export interface EvaluationData {
  id?: number;
  titre_evaluation: string;
  date_creation?: string;
  chapitre_id: number | null;
  sequence_id: number | null;
  activite_id: number | null;
  ressource_urls: string | null;
  type_evaluation: string | null;
  // MODIFI√â: Suppression de modalite_evaluation string | null
  // NOUVEAU: Ajout de champs pour la gestion des modalit√©s multiples et "Autre"
  modalite_evaluation_ids?: number[];
  modalite_evaluation_autre_texte?: string | null;
  grille_correction: string | null;
  date_mise_a_jour?: string;

  objectifs?: number[]; 

  selected_specific_competence_id?: number | null;
  selected_general_competence_ids?: number[];
  
  // MODIFI√â: selected_connaissance_ids est maintenant un tableau
  selected_connaissance_ids?: number[]; 
  // NOUVEAU: Champ pour le texte de la nouvelle connaissance
  new_connaissance_text?: string | null;

  selected_capacite_habilete_id?: number | null; // Reste une s√©lection unique pour cet exemple

  niveau_id?: number | null;
  option_id?: number | null;
  unite_id?: number | null;
}

// ---
// Sous-composant : LongTextField (inchang√©)
// ---
interface LongTextFieldProps {
  label: string;
  id: string;
  value: string;
  onChange: (val: string) => void;
  rows?: number;
  placeholder?: string;
}

const LongTextField: React.FC<LongTextFieldProps> = ({
  label,
  id,
  value,
  onChange,
  rows = 4,
  placeholder = "",
}) => (
  <div className="mb-5">
    <label htmlFor={id} className="block font-semibold mb-1 text-gray-700">
      {label}
    </label>
    <textarea
      id={id}
      rows={rows}
      className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
      value={value}
      onChange={(e) => onChange(e.target.value)}
      placeholder={placeholder || `Entrez ${label.toLowerCase()}...`}
    />
  </div>
);

// ---
// Propri√©t√©s (Props) du composant CreateEvaluationEditor (inchang√© sauf l'interface)
// ---
interface CreateEvaluationEditorProps {
  initialData: EvaluationData;
  onUpdate: (updatedFields: Partial<EvaluationData>) => void;
  onSaveTrigger: () => void;
  onCancel?: () => void;
  saving: boolean;
  error: string | null;
  successMessage: string | null;
  onSuccessRedirectPath?: string;
  setFormError: (message: string | null) => void;
}

// ============================================================
// Composant principal : CreateEvaluationEditor
// ============================================================
const CreateEvaluationEditor: React.FC<CreateEvaluationEditorProps> = ({
  initialData,
  onUpdate,
  onSaveTrigger,
  onCancel,
  saving,
  error,
  successMessage,
  onSuccessRedirectPath,
  setFormError,
}) => {
  const navigate = useNavigate();

  useEffect(() => {
    if (successMessage && onSuccessRedirectPath && !saving) {
      const timer = setTimeout(() => {
        navigate(onSuccessRedirectPath);
      }, 1500);
      return () => clearTimeout(timer);
    }
  }, [successMessage, onSuccessRedirectPath, saving, navigate]);

  // --- Gestionnaires d'√©v√©nements m√©mo√Øs√©s avec `useCallback` ---

  const handleHierarchicalSelectionChange = useCallback((selection: {
    niveauId: number | null;
    optionId: number | null;
    uniteId: number | null;
    chapitreId?: number | null;
    objectifIds?: number[];
  }) => {
    console.log(
      "üîµ HierarchicalSelector - S√©lection mise √† jour re√ßue par CreateEvaluationEditor:",
      selection
    );
    onUpdate({
      niveau_id: selection.niveauId,
      option_id: selection.optionId,
      unite_id: selection.uniteId,
      chapitre_id: selection.chapitreId,
      objectifs: selection.objectifIds || [],
      // Quand le chapitre change, on r√©initialise les connaissances s√©lectionn√©es
      // pour √©viter que des connaissances d'un ancien chapitre restent coch√©es.
      selected_connaissance_ids: [],
      new_connaissance_text: '', // R√©initialise aussi le champ de texte
    });
  }, [onUpdate]);

  // MODIFI√â: G√®re les nouvelles propri√©t√©s pour les connaissances
  const handleCompetenceSelectionChange = useCallback((selection: {
    selectedSpecificCompetenceId: number | null;
    selectedGeneralCompetenceIds: number[];
    selectedConnaissanceIds: number[]; // MODIFI√â
    newConnaissanceText: string;      // NOUVEAU
    selectedCapaciteHabileteId: number | null; // Reste une s√©lection unique
  }) => {
    console.log("üîµ CompetenceSelector - S√©lection mise √† jour re√ßue :", selection);
    onUpdate({
      selected_specific_competence_id: selection.selectedSpecificCompetenceId,
      selected_general_competence_ids: selection.selectedGeneralCompetenceIds,
      selected_connaissance_ids: selection.selectedConnaissanceIds, // Met √† jour le tableau d'IDs
      new_connaissance_text: selection.newConnaissanceText,       // Met √† jour le texte
      selected_capacite_habilete_id: selection.selectedCapaciteHabileteId,
    });
  }, [onUpdate]);

  // NOUVEAU: Gestionnaire pour les changements du ModaliteSelector
  const handleModaliteSelectionChange = useCallback((selection: {
    selectedModaliteIds: number[];
    autreModaliteText: string;
  }) => {
    console.log("üîµ ModaliteSelector - S√©lection mise √† jour re√ßue :", selection);
    onUpdate({
      modalite_evaluation_ids: selection.selectedModaliteIds,
      modalite_evaluation_autre_texte: selection.autreModaliteText,
    });
  }, [onUpdate]);


  const handleResourceUploadComplete = useCallback((urls: string[] | null) => {
    console.log("üîµ MultiFileUpload - URLs re√ßues et pass√©es √† onUpdate :", urls);
    onUpdate({ ressource_urls: urls ? urls.join('\n') : null });
  }, [onUpdate]);

  const handleBack = () => {
    console.log("‚ÑπÔ∏è Bouton Annuler cliqu√©.");
    if (onCancel) onCancel();
    else navigate(-1);
  };

  const handleSubmit = () => {
    setFormError(null);

    // Validation des champs obligatoires :
    if (!initialData.titre_evaluation || initialData.titre_evaluation.trim() === "") {
        setFormError("Le titre de l'√©valuation est obligatoire.");
        return;
    }

    // Validation des comp√©tences :
    const hasSpecificCompetence = initialData.selected_specific_competence_id !== null;
    const hasGeneralCompetences = (initialData.selected_general_competence_ids && initialData.selected_general_competence_ids.length > 0);

    if (!hasSpecificCompetence && !hasGeneralCompetences) {
        setFormError("Veuillez s√©lectionner au moins une comp√©tence (sp√©cifique ou g√©n√©rale).");
        return;
    }

    // NOUVEAU: Validation des connaissances
    const hasSelectedConnaissances = (initialData.selected_connaissance_ids && initialData.selected_connaissance_ids.length > 0);
    const hasNewConnaissanceText = (initialData.new_connaissance_text && initialData.new_connaissance_text.trim() !== '');

    // Si le chapitre est s√©lectionn√©, il doit y avoir au moins une connaissance s√©lectionn√©e ou une nouvelle connaissance propos√©e
    if (initialData.chapitre_id && !hasSelectedConnaissances && !hasNewConnaissanceText) {
        setFormError("Veuillez s√©lectionner au moins une connaissance ou ajouter une nouvelle notion si un chapitre est s√©lectionn√©.");
        return;
    }

    // NOUVEAU: Validation des modalit√©s d'√©valuation
    const hasSelectedModalites = (initialData.modalite_evaluation_ids && initialData.modalite_evaluation_ids.length > 0);
    const hasAutreModaliteText = (initialData.modalite_evaluation_autre_texte && initialData.modalite_evaluation_autre_texte.trim() !== '');

    if (!hasSelectedModalites && !hasAutreModaliteText) {
        setFormError("Veuillez s√©lectionner au moins une modalit√© d'√©valuation ou sp√©cifier une nouvelle modalit√©.");
        return;
    }
    
    // Si toutes les validations passent, d√©clenche la fonction de sauvegarde du parent.
    onSaveTrigger();
  };

  // --- Rendu du Composant (JSX) ---
  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-lg shadow-xl">
      <h1 className="text-2xl font-semibold text- mb-8 text-center">
        Saisir et modifier les √©l√©ments d'une √âvaluation
      </h1>

      {/* Bloc pour le s√©lecteur hi√©rarchique */}
      <div className="max-w-3xl mx-auto p-6 bg-blue-50 rounded-lg shadow-xl mb-6">
        <h3 className="text-xl font-semibold text-gray-800 mb-4">Contexte P√©dagogique G√©n√©ral</h3>
        <HierarchicalSelector
          onChange={handleHierarchicalSelectionChange}
          initialNiveauId={initialData.niveau_id}
          initialOptionId={initialData.option_id}
          initialUniteId={initialData.unite_id}
          initialChapitreId={initialData.chapitre_id}
          initialObjectifIds={initialData.objectifs}
          showChapitre={true}
          showCompetences={false}
          showObjectifs={true}
        />
      </div>

      {/* Bloc pour la s√©lection des Comp√©tences, Capacit√©s et Connaissances */}
      <div className="max-w-3xl mx-auto p-6 bg-green-50 rounded-lg shadow-xl mb-6">
        <h3 className="text-xl font-semibold text-gray-800 mb-4">Comp√©tences, Capacit√©s et Connaissances √âvalu√©es</h3>
        <CompetenceSelector
          onSelectionChange={handleCompetenceSelectionChange}
          initialSpecificCompetenceId={initialData.selected_specific_competence_id}
          initialGeneralCompetenceIds={initialData.selected_general_competence_ids}
          // MODIFI√â: Passe le tableau d'IDs des connaissances
          initialConnaissanceIds={initialData.selected_connaissance_ids}
          // NOUVEAU: Passe le texte de la nouvelle connaissance
          initialNewConnaissanceText={initialData.new_connaissance_text}
          initialCapaciteHabileteIds={initialData.selected_capacite_habilete_id ? [initialData.selected_capacite_habilete_id] : null}
          chapitreId={initialData.chapitre_id}
          uniteId={initialData.unite_id}
        />
      </div>

      {/* Bloc pour les d√©tails de l'√âvaluation */}
      <div className="max-w-3xl mx-auto p-6 bg-blue-100 rounded-lg shadow-xl mb-6">
        <h3 className="text-xl font-semibold text-gray-800 mb-4">D√©tails de l'√âvaluation</h3>
        <label htmlFor="titre_evaluation" className="block font-semibold mb-1 text-gray-700">
          Titre de l‚Äô√©valuation <span className="text-red-600">*</span>
        </label>
        <input
          id="titre_evaluation"
          type="text"
          className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          value={initialData.titre_evaluation || ""}
          onChange={(e) => onUpdate({ titre_evaluation: e.target.value })}
          placeholder="Ex: √âvaluation sommative - Le cycle de l'eau"
          required
        />

        <div className="mb-5">
          <label htmlFor="type_evaluation" className="block font-semibold mb-1 text-gray-700">
            Type d'√©valuation
          </label>
          <select
            id="type_evaluation"
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
            value={initialData.type_evaluation || ""}
            onChange={(e) => onUpdate({ type_evaluation: e.target.value })}
          >
            <option value="">S√©lectionner un type</option>
            <option value="diagnostique">Diagnostique</option>
            <option value="formative">Formative</option>
            <option value="sommative">Sommative</option>
            <option value="certificative">Certificative</option>
          </select>
        </div>

        {/* NOUVEAU: Int√©gration du ModaliteSelector */}
        <div className="mb-5">
          <h4 className="block font-semibold mb-1 text-gray-700">
            Modalit√©(s) de l'√©valuation <span className="text-red-600">*</span>
          </h4>
          <ModaliteSelector
            onSelectionChange={handleModaliteSelectionChange}
            initialSelectedModaliteIds={initialData.modalite_evaluation_ids}
            initialAutreModaliteText={initialData.modalite_evaluation_autre_texte}
          />
        </div>

        <LongTextField
          label="Grille de correction / Crit√®res"
          id="grille_correction"
          value={initialData.grille_correction || ""}
          onChange={(val) => onUpdate({ grille_correction: val })}
          placeholder="D√©taillez les crit√®res d'√©valuation ou la grille de correction."
        />
      </div>

      <div className="mb-6 border-t pt-6 border-gray-200">
        <h3 className="text-xl font-semibold text-gray-800 mb-4">Ressources Associ√©es (Optionnel)</h3>
        <MultiFileUpload
          onUploadComplete={handleResourceUploadComplete}
          disabled={saving}
          initialUrls={
            initialData.ressource_urls
              ? initialData.ressource_urls.split('\n').filter(Boolean)
              : []
          }
        />
      </div>

      {error && (
        <div className="mb-4 p-4 bg-red-100 text-red-700 rounded-md border border-red-200" role="alert">
          <p className="font-medium">Erreur :</p>
          <p>{error}</p>
        </div>
      )}
      {successMessage && (
        <div className="mb-4 p-4 bg-green-100 text-green-700 rounded-md border border-green-200" role="alert">
          <p className="font-medium">Succ√®s :</p>
          <p>{successMessage}</p>
        </div>
      )}

      <div className="flex justify-between mt-8">
        <button
          type="button"
          onClick={handleBack}
          disabled={saving}
          className="px-6 py-3 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed transition duration-150 ease-in-out"
        >
          Annuler
        </button>

        <button
          type="button"
          onClick={handleSubmit}
          disabled={saving}
          className={`px-8 py-3 rounded-md text-white font-semibold shadow-md ${
            saving
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          } transition duration-150 ease-in-out`}
        >
          {saving ? "Enregistrement en cours..." : "Enregistrer l'√©valuation"}
        </button>
      </div>
    </div>
  );
};

export default CreateEvaluationEditor;