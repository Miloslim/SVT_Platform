// ============================================================================
// üìÅ Fichier : src/components/planipeda/pages/EditSequenceEditorPage.tsx
// üéØ Objectif :
//    - Page d√©di√©e √† l'√©dition d'une s√©quence p√©dagogique existante.
//    - R√©cup√®re l'ID de la s√©quence depuis l'URL.
//    - Charge les donn√©es de la s√©quence et les passe au formulaire d'√©dition.
//    - G√®re la soumission du formulaire pour la mise √† jour de la s√©quence.
// ============================================================================
// src/app/planipeda/sequences/[sequenceId]/edit/page.tsx
// (Ancien homologue : src/components/planipeda/pages/EditSequenceModal.tsx)

// Fonctionnalit√©s:
// - Affiche une page d√©di√©e pour l'√©dition d'une s√©quence p√©dagogique.
// - R√©cup√®re l'ID de la s√©quence directement depuis les param√®tres de l'URL.
// - Int√®gre le composant EditSequenceEditor.
// - G√®re la navigation apr√®s la sauvegarde r√©ussie ou l'annulation.

import React from 'react';
import { notFound, useRouter } from 'next/navigation'; // Pour g√©rer les IDs invalides et la navigation
import dynamic from 'next/dynamic'; // Pour un import dynamique si EditSequenceEditor est lourd
import { toast } from 'sonner'; // Pour les notifications toast

// Import dynamique de EditSequenceEditor pour optimiser le chargement
// Utile si EditSequenceEditor est un composant volumineux ou a des d√©pendances c√¥t√© client.
const EditSequenceEditor = dynamic(
  () => import('@/components/planipeda/ScenarioEditor/EditSequenceEditor'),
  {
    loading: () => (
      <div className="flex items-center justify-center h-48">
        <p className="text-gray-600">Chargement de l'√©diteur de s√©quence...</p>
      </div>
    ),
    ssr: false, // Important si l'√©diteur contient des hooks ou des libs client-side (ex: √©diteur de texte riche)
  }
);

interface EditSequencePageProps {
  params: {
    sequenceId: string; // L'ID de la s√©quence vient des param√®tres d'URL (sera une cha√Æne)
  };
}

const EditSequenceEditorPage: React.FC<EditSequencePageProps> = ({ params }) => {
  const router = useRouter();
  const sequenceId = parseInt(params.sequenceId, 10); // Convertit l'ID de l'URL en nombre

  // G√®re le cas o√π l'ID n'est pas un nombre valide.
  // notFound() de Next.js affichera la page 404 de ton application.
  if (isNaN(sequenceId)) {
    console.error("ID de s√©quence invalide re√ßu:", params.sequenceId);
    notFound();
  }

  // Callback appel√© par EditSequenceEditor apr√®s une sauvegarde r√©ussie
  const handleSaveSuccess = () => {
    toast.success("S√©quence enregistr√©e avec succ√®s !");
    // Redirige vers la page pr√©c√©dente (l√† d'o√π l'utilisateur est venu)
    // Ou tu peux choisir une redirection sp√©cifique, ex: router.push(`/planipeda/sequences/${sequenceId}`);
    router.back();
  };

  // Callback appel√© par EditSequenceEditor en cas d'annulation
  const handleCancel = () => {
    toast.info("√âdition de la s√©quence annul√©e.");
    // Redirige vers la page pr√©c√©dente
    router.back();
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white p-6 md:p-8 rounded-lg shadow-xl border border-gray-200">
        <h1 className="text-3xl md:text-4xl font-extrabold text-gray-900 mb-6 text-center">
          Modifier la S√©quence P√©dagogique
        </h1>
        <p className="text-lg text-gray-700 mb-8 text-center">
          Vous √©ditez la s√©quence avec l'ID : **{sequenceId}**.
        </p>

        {/* Le composant EditSequenceEditor est rendu ici avec les props n√©cessaires */}
        {/* On s'assure que sequenceId est bien un nombre valide */}
        {sequenceId && ( // Cette v√©rification est redondante apr√®s le notFound() mais ne fait pas de mal
          <EditSequenceEditor
            sequenceId={sequenceId}
            onSaveSuccess={handleSaveSuccess}
            onCancel={handleCancel}
          />
        )}
      </div>
    </div>
  );
};

export default EditSequenceEditorPage;