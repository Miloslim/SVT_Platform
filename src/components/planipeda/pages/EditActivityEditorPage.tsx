// üìÅ src/components/planipeda/pages/EditActivityEditorPage.tsx
// Page pour √©diter une activit√© p√©dagogique existante

import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import EditActivityEditor from "@/components/planipeda/ScenarioEditor/EditActivityEditor"; // Le composant que nous avons refactoris√©
import { supabase } from "@/backend/config/supabase";
import { ActivityData } from "@/types/activity"; // IMPORTER L'INTERFACE HARMONIS√âE

const EditActivityEditorPage: React.FC = () => {
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>(); // R√©cup√®re l'ID de l'URL

    // üîÑ √âtats de chargement et de feedback pour la page
    const [loadingPage, setLoadingPage] = useState(true);
    const [errorPage, setErrorPage] = useState<string | null>(null);

    // üìù √âtat de l'activit√©, initialis√© selon l'interface ActivityData
    const [activityData, setActivityData] = useState<ActivityData>({
        // Initialiser avec des valeurs par d√©faut pour √©viter les erreurs de type
        chapitre_id: null,
        titre_activite: "",
        description: null,
        role_enseignant: null,
        materiel: null,
        duree_minutes: null,
        modalite_deroulement: null,
        modalite_evaluation: null,
        commentaires: null,
        ressource_urls: [],
        niveau_id: null,
        option_id: null,
        unite_id: null,
        objectifs: [],
    });

    // üì¶ Chargement de l‚Äôactivit√© existante
    useEffect(() => {
        if (!id) {
            setErrorPage("ID de l'activit√© manquant dans l'URL.");
            setLoadingPage(false);
            return;
        }

        const activityId = parseInt(id, 10); // Convertir l'ID en nombre
        if (isNaN(activityId)) {
            setErrorPage("ID d'activit√© invalide.");
            setLoadingPage(false);
            return;
        }

        // Le chargement de l'activit√© est d√©sormais g√©r√© √† l'int√©rieur de EditActivityEditor (le composant)
        // Ce composant de page passe juste l'ID √† EditActivityEditor, qui est responsable de son propre chargement
        // et de sa gestion d'√©tat interne.
        // La raison pour laquelle on maintient un `loadingPage` ici est si `EditActivityEditor`
        // devait √™tre un composant enti√®rement "muet" qui prend `initialData` compl√®te d√®s le d√©part.
        // Cependant, notre `EditActivityEditor` que nous avons refactoris√© est d√©j√† un "wrapper" de chargement.
        // Donc, ce `useEffect` ici devient redondant si `EditActivityEditor` g√®re son propre chargement.

        // Pour notre architecture actuelle (EditActivityEditor est le composant de chargement):
        // Cette page ne fait que passer l'ID au composant EditActivityEditor.
        // EditActivityEditor lui-m√™me va faire le fetch et g√©rer ses √©tats de chargement/erreur.
        // Donc, nous n'avons pas besoin de fetcher ici.
        // La seule chose √† faire est de passer `activityId` √† `EditActivityEditor`.
        setLoadingPage(false); // Marquer comme non-chargement puisque le chargement est dans le composant enfant.

    }, [id]);

    // Les fonctions onSaved et onDelete sont les callbacks du composant EditActivityEditor
    // pour g√©rer les actions globales (redirection apr√®s sauvegarde/suppression)
    const handleActivitySaved = () => {
        console.log("‚úÖ Activit√© sauvegard√©e avec succ√®s depuis la page.");
        navigate("/planipeda/activites"); // Rediriger apr√®s sauvegarde
    };

    const handleActivityDeleted = () => {
        console.log("üóëÔ∏è Activit√© supprim√©e avec succ√®s depuis la page.");
        navigate("/planipeda/activites"); // Rediriger apr√®s suppression
    };

    const handleCancel = () => {
        console.log("‚Ü©Ô∏è Annulation depuis la page.");
        navigate("/planipeda/activites"); // Rediriger vers la liste des activit√©s
    };

    if (loadingPage) {
        return (
            <div className="flex justify-center items-center h-screen">
                <p className="text-xl text-gray-600">Pr√©paration de la page d'√©dition...</p>
            </div>
        );
    }

    if (errorPage) {
        return (
            <div className="flex justify-center items-center h-screen">
                <div className="p-8 bg-red-100 border border-red-400 text-red-700 rounded-lg shadow-md">
                    <p className="text-xl font-bold mb-4">Erreur :</p>
                    <p>{errorPage}</p>
                    <button
                        onClick={() => navigate("/planipeda/activites")}
                        className="mt-6 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition"
                    >
                        Retour √† la liste des activit√©s
                    </button>
                </div>
            </div>
        );
    }

    // Le composant EditActivityEditor (que nous avons refactoris√©) prend maintenant l'ID et g√®re son propre chargement.
   return (
        <div className="p-6 space-y-8">
            <h1 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">
                Modifier une activit√© d'apprentissage
                    <div className="flex items-center mb-6">
      <button onClick={() => window.history.back()} 
         className="text-xl btn-outline mb-6 flex text-center gap-1">
        ‚Üê Retour
      </button>
    </div>
            </h1>

            <EditActivityEditor
                activityId={parseInt(id || "0", 10)} // Passer l'ID converti
                onSaved={handleActivitySaved}
                onCancel={handleCancel}
            />
        </div>
    );
};

export default EditActivityEditorPage;